# -*- coding: utf-8 -*-
"""anomaly_detection_timeseries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iIqcmhYcpm1JuBjlLwUBbU2rJjzSKxGB
"""

from google.colab import drive
drive.mount('/content/drive')

!ls

# Commented out IPython magic to ensure Python compatibility.
#/content/drive/MyDrive/example_monthly.csv

from pprint import pprint
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import io
df = pd.read_csv("/content/drive/MyDrive/example_monthly.csv")
# %matplotlib inline

!pip install adtk yfinance pandas matplotlib

import yfinance as yf

from adtk.data import validate_series
from adtk.visualization import plot
from adtk.detector import ThresholdAD, SeasonalAD, QuantileAD, InterQuartileRangeAD, GeneralizedESDTestAD, PersistAD

df["Date"] = pd.to_datetime(df["Date"])
df = df.set_index("Date")
df = df["Mean"]
print(df)

##Anomaly detection using thresholdAD which is the simple anomaly
threshold_detector = ThresholdAD(low=-0.5, high=0.75)
anomalies = threshold_detector.detect(df)
plot(df, anomaly=anomalies, anomaly_color="red", anomaly_tag="marker")
plt.show()

##Anomaly Quantile
quantile_detector = QuantileAD(low=0.01, high=0.99)
anomalies = quantile_detector.fit_detect(df)
plot(df, anomaly=anomalies, anomaly_color="red", anomaly_tag="marker")
plt.show()

InterQuartileRangeAD,
##Anomaly Interquantile range
iqr_detector = InterQuartileRangeAD(c=1.5)  ##c can vary
anomalies = iqr_detector.fit_detect(df)
plot(df, anomaly=anomalies, anomaly_color="red", anomaly_tag="marker")
plt.show()

GeneralizedESDTestAD,
##esd generalizedESDtestAD needs to validate 1st

df = yf.download("TSLA")['Close']
df = validate_series(df)
esd_ad = GeneralizedESDTestAD(alpha=0.3)
anomalies = esd_ad.fit_detect(df)
plot(df, anomaly=anomalies, ts_linewidth=1, ts_markersize=3, anomaly_color="red", anomaly_tag="marker")
plt.show()

##perhaps the data is not normalized, hence no anomaly never detected here

PersistAD,
df = yf.download("TSLA")['Close']
df = validate_series(df)

persist_detector = PersistAD(c=25.0, side="positive")
anomalies = persist_detector.fit_detect(df)
plot(df, anomaly=anomalies, ts_linewidth=1, ts_markersize=3, anomaly_color="red")
plt.show()

